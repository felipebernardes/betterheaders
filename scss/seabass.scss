* {
  box-sizing: border-box;
}

html {
  font-family: 'Lobster', cursive;
  font-size: 16px;
}

body {
  background-image: url('https://images.unsplash.com/photo-1415638424454-36a7d12ae941?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&s=577f8af4c4dd67cd54c65a8c0910199c');
  background-size: cover;
  background-repeat: no-repeat;
}

header {
  position: relative;
  height: 100vh;
  width: 100vw;
  display: flex;

  &:after {
    content: '';
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    background: #5f2c82; /* fallback for old browsers */
    background: -webkit-linear-gradient(to left, #5f2c82 , #49a09d); /* Chrome 10-25, Safari 5.1-6 */
    background: linear-gradient(to left, #5f2c82 , #49a09d); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */
    opacity: 0.66;
    z-index: -1;
  }
}

$offset: -20px;
$count: 8;
$duration: 7;

@keyframes wave {
  from { transform: translateY(0); }
  to   { transform: translateY( $offset ); }
}

h1 {
  margin: auto;
  color: #FFF;
  font-size: 24vmax;
  line-height: 12vmax;
  letter-spacing: -3.5rem;
  background-size: center;
  background-repeat: no-repeat;
  -webkit-background-clip: text;
  -webkit-text-fill-color: rgba(0,0,0,.8);

  span {
    display: inline-block;
    animation-duration: #{$duration}s;
    animation-name: wave;
    animation-iteration-count: infinite;
    animation-direction: alternate;
    animation-timing-function: linear;
    position: relative;

    &:after {
        position: absolute;
        left: 2vmax;
        bottom: -1vmax;
        opacity: 0.5;
    }

    &:nth-of-type(1):after {
      content: 's';
    }

    &:nth-of-type(2):after {
      content: 'e';
    }

    &:nth-of-type(3):after {
      content: 'a';
    }

    &:nth-of-type(4):after {
      content: 'b';
    }

    &:nth-of-type(5):after {
      content: 'a';
    }

    &:nth-of-type(6):after {
      content: 's';
    }

    &:nth-of-type(7):after {
      content: 's';
    }
  }

}

@for $i from 0 to $count {
  h1 :nth-child( #{$count}n + #{$i} ) {
      /*animation-delay: -#{($count - $i) * 2 * $duration / $count }s;*/
      animation-delay: #{$i}s;
  }
}
